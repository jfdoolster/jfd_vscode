{
"rexBase": {
  "prefix": "rexBase",
  "body": [
    "package main",
    "",
    "import (",
    "	\"fmt\"",
    "	\"log\"",
    "	\"os\"",
    "	\"os/signal\"",
    "	\"syscall\"",
    "	\"test_rex/exe/modules/wranglerModule/jsonapi\"",
    "	\"time\"",
    "",
    "	\"github.com/go-resty/resty/v2\"",
    "	rexcmn \"gitlab.nrao.edu/digital/rexlib/common\"",
    "	rexlog \"gitlab.nrao.edu/digital/rexlib/logging\"",
    "	rex \"gitlab.nrao.edu/digital/rexlib/module\"",
    ")",
    "",
    "var userLog *rexlog.TextLog",
    "var settings *rexlog.ValueLog",
    "",
    "var base string",
    "",
    "func main() {",
    "	// Create a channel to handle a Ctrl-C to stop the module manually",
    "	sig_chan := make(chan os.Signal, 1)",
    "	signal.Notify(sig_chan, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)",
    "",
    "	// Make this program a Rex Module",
    "	err := rex.InitModule(onInitCommand, onStartCommand, onTickCommand, onResetCommand, onExitCommand, onError)",
    "",
    "	// Assign the name and unique ID for this module type.",
    "	// This name will appear in the Curator catalog and in logs",
    "	rex.Module.Name = \"\"",
    "	rex.Module.Version = \"\"",
    "	// It is up to you to get a unique ID!",
    "	rex.Module.ModId = \"\"",
    "",
    "	if err != nil {",
    "		log.Fatal(err)",
    "	} else {",
    "		log.Printf(\"Module %s started!\\n\", rex.Module.Name)",
    "	}",
    "",
    "	// Keep the module alive by waiting for termination from the OS",
    "	<-sig_chan",
    "}",
    "",
    "func onInitCommand(jobId string, jMap rexcmn.JsonMap) error {",
    "	userLog = rexlog.NewUserLog(rex.Module.Name, jobId)",
    "	settings = rexlog.NewSettingLog(rex.Module.Name, jobId)",
    "",
    "	userLog.Debug(fmt.Sprint(rex.Module.Name, \" received Init command\"))",
    "",
    "	base = settings.GetString(\"base\")",
    "",
    "	client := resty.New()",
    "	client.SetTimeout(time.Duration(1) * time.Second)",
    "",
    "	jsonapi.SetRestClient(client)",
    "	jsonapi.SetBaseHttpAddr(base)",
    "",
    "	return nil",
    "}",
    "",
    "func onStartCommand() (rexcmn.TickResult, error) {",
    "	userLog.Debug(fmt.Sprint(rex.Module.Name, \" received Start command\"))",
    "	return rexcmn.ResultRunning, nil",
    "}",
    "",
    "func onTickCommand(jMap rexcmn.JsonMap) (rexcmn.TickResult, error) {",
    "	userLog.Debug(fmt.Sprint(rex.Module.Name, \" received Tick command\"))",
    "	return rexcmn.ResultSuccess, nil",
    "}",
    "",
    "func onResetCommand() error {",
    "	userLog.Debug(fmt.Sprint(rex.Module.Name, \" received Reset command\"))",
    "	return nil",
    "}",
    "",
    "func onExitCommand() error {",
    "	userLog.Debug(fmt.Sprint(rex.Module.Name, \" received Exit command\"))",
    "	return nil",
    "}",
    "",
    "func onError() error {",
    "	userLog.Error(fmt.Sprintf(\"Module %s exiting on error\", rex.Module.Name))",
    "	time.Sleep(50 * time.Millisecond)",
    "	os.Exit(1)",
    "",
    "	// (optional if not exiting above) return nil for no errors or fmt.Errorf(\"your explanation\")",
    "	return nil",
    "}"
  ],
  "description": "rexBase"
}
}